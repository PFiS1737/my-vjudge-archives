// INFO: Tags : -
//        URL : https://vjudge.net/problem/CodeForces-2038A
//
// 有 n 名编号为 1 到 n 的软件工程师。他们的老板承诺，如果他们完成一个额外项目，将给他们发放奖金。
// 完成这个项目总共需要 k 个单位的工作。给第 i 名工程师的奖金是 ai。第 i 名工程师估计他们的一个单位的工作成本为 bi。
// 如果奖金发放了，那么第 i 名工程师完成 c 个单位的工作的收益 si 定义为 si = ai − c * bi。
// 如果奖金不发放，工程师将不会自愿做任何工作。
// 工程师们已经一起工作了很多年，所以他们知道奖金将如何分配，以及他们的同事对劳动的估值是多少。
// 也就是说，团队中的每个工程师都知道所有的 ai 和 bi。
// 工程师们渴望得到奖金，所以他们同意按照以下过程在他们之间分配工作：
// - 第一名工程师说：“我将完成 c1 个单位的工作”，其中 c1 是一个非负整数；
// - 然后，第二名工程师说：“我将完成 c2 个单位的工作”，其中 c2 是一个非负整数；
// - 以此类推 ...；
// - 最后，第 n 名工程师说：“我将完成 cn 个单位的工作”，其中 cn 是一个非负整数。
// 每个工程师都会说出一个 ci 来最大化他们自己的收益 si。
// 如果预期的收益为零，工程师仍然会同意工作以获得经验并帮助他们的同事获得奖金。
// 然而，如果出于某种原因预期的收益为负（工程师需要进行过量的工作，或者项目无法完成），那么该工程师将不会进行任何工作（完成0个单位的工作）。
// 假设每个工程师的行为都是完美的，你的任务是找出每个工程师所说的数字 ci。
//
// Input
// 第一行包含两个整数 n 和 k（ 1 ≤ n ≤ 1000；1 ≤ k ≤ 10^6 ），分别表示公司中的工程师人数和项目所需的工作单位数。
// 第二行包含 n 个整数 a1, a2, ..., an（ 1 ≤ ai ≤ 10^9 ），其中 ai 表示如果项目完成，将支付给第 i 位工程师的奖金。
// 第三行包含 n 个整数 b1, b2, ..., bn（ 1 ≤ bi ≤ 1000 ），其中 bi 表示第 i 位工程师的工作单位成本。
//
// Output
// 打印 n 个整数 c1, c2, ..., cn ( 0 ≤ ci ≤ k ) —— 在每个工程师都表现最优的情况下，每个工程师完成的工作量。
// 请注意，答案是唯一的。
//
// HACK: Solution: 见代码注释
//
// INFO: Memory : -
//         Time : ~77 ms

// Sample Input
// 4
// 3 6
// 4 7 6
// 1 2 3
// 3 12
// 4 7 6
// 1 2 3
// 3 11
// 6 7 8
// 1 2 3
// 5 11
// 4 5 6 7 8
// 1 1 1 2 3

// Sample Output
// 1 3 2
// 0 0 0
// 6 3 2
// 0 0 6 3 2

#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

void solve() {
  int n, k;
  cin >> n >> k;

  vector<int> a(n);
  for (int i = 0; i < n; i++) {
    cin >> a[i];
  }

  vector<int> b(n);
  for (int i = 0; i < n; i++) {
    cin >> b[i];
  }

  vector<int> c(n, 0);
  int sum = 0;
  // NOTE: 由于每个员工总是希望自己的奖金尽可能多，即负责的工作单位尽可能少，
  //       故排在前面的员工总是倾向于负责 0 个工作单位，
  //       而排在后面的员工就必须负责尽可能多的工作单位。
  //       于是我们从后往前遍历，依次计算即可。
  for (int i = n - 1; i >= 0; i--) {
    int m = a[i] / b[i];
    m = min(m, k - sum);
    c[i] = m;
    sum += m;
    if (sum == k)
      break;
  }

  if (sum < k) {
    for (int i = 0; i < n; i++) {
      cout << (i ? " " : "") << "0";
    }
  } else {
    for (int i = 0; i < n; i++) {
      cout << (i ? " " : "") << c[i];
    }
  }

  cout << endl;
}

int main() {
#ifdef LOCAL_JUDGE
  int T;
  cin >> T;
  while (T--)
#endif
    solve();
  return 0;
}
